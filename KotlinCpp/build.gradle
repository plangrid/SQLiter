/*
 * Copyright 2010-2017 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.jetbrains.kotlin.DistroHelper
import org.jetbrains.kotlin.konan.target.DistributionKt
import org.jetbrains.kotlin.konan.target.HostManager
import org.jetbrains.kotlin.konan.target.PlatformManager
import org.jetbrains.kotlin.konan.target.TargetSupportException

buildscript {
  apply from: "gradle/kotlinGradlePlugin.gradle"
  apply from: "gradle/kotlinNativeShared.gradle"
}


import org.jetbrains.kotlin.konan.util.DependencyProcessor

convention.plugins.platformInfo = new PlatformInfo()

ext {
    if(!rootProject.hasProperty('konanDevPath')){
        konanPath = new File(buildDir, "kndist").path
    } else {
        konanPath = konanDevPath
    }
    distDir = file('dist')
    dependenciesDir = DependencyProcessor.defaultDependenciesRoot
    experimentalEnabled = project.hasProperty("org.jetbrains.kotlin.native.experimentalTargets")
    platformManager = new PlatformManager(DistributionKt.buildDistribution(konanPath),
            ext.experimentalEnabled)
}

allprojects {
    if (path != ":dependencies") {
        evaluationDependsOn(":dependencies")
    }

    repositories {
        mavenCentral()
        maven {
            url kotlinCompilerRepo
        }
        maven { url 'https://dl.bintray.com/kotlin/kotlin-dev/' }
    }

    setupHostAndTarget()
    setupClang(project)
}

void setupHostAndTarget() {
    ext.hostName = platformManager.hostName
    ext.targetList = platformManager.enabled.collect { it.visibleName } as List
    ext.konanTargetList = platformManager.enabled as List
}

void setupClang(Project project) {

    project.convention.plugins.platformManager = project.rootProject.ext.platformManager
    project.convention.plugins.execClang = new org.jetbrains.kotlin.ExecClang(project)

    project.plugins.withType(NativeComponentPlugin) {
        project.model {
            if (isWindows()) {
                platforms {
                    host {
                        architecture 'x86_64'
                    }
                }

                components {
                    withType(NativeComponentSpec) {
                        targetPlatform 'host'
                    }
                }

                toolChains {
                    gcc(Gcc) {
                        path "$llvmDir/bin"
                    }
                }
            } else {

                toolChains {
                    clang(Clang) {
                        hostPlatform.clang.clangPaths.each {
                            path it
                        }

                        eachPlatform { // TODO: will not work when cross-compiling
                            [cCompiler, cppCompiler, linker].each {
                                it.withArguments { it.addAll(project.hostPlatform.clang.clangArgs) }
                            }

                        }
                    }
                }
            }
        }
    }
}

class PlatformInfo {
    boolean isMac() {
        return HostManager.hostIsMac
    }

    boolean isWindows() {
        return HostManager.hostIsMingw
    }

    boolean isLinux() {
        return HostManager.hostIsLinux
    }

    Throwable unsupportedPlatformException() {
        return new TargetSupportException()
    }
}

def stdlib = 'klib/common/stdlib'

task clean {
    //dependsOn subprojects.collect { it.tasks.matching { it.name == "clean" } }
    doLast {
        delete distDir
    }
}
